name: Build and push ckan-docker images

on:
  pull_request:
    types:
        - closed
    branches:
        - master
        - 'ckan-*.*'
        - '!ckan-main'
        - '!dev/ckan-*.*.*'
        - '!feature/*'
        - '!fix/*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mjanez/ckan-base-spatial
  CONTEXT: .
  BRANCH: ${{ github.head_ref }}
  DOCKERFILE: Dockerfile
  HADOLINT_VERSION: 2.12.0

jobs:
  build_and_push_base:
    name: runner/test-docker-pr:${{ github.head_ref }}.*
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check out code
        uses: actions/checkout@v4

      - name: Extract CKAN_VERSION from base Dockerfile
        id: extract_version
        run: |
          CKAN_VERSION=$(grep -oP '(?<=^ARG CKAN_VERSION=ckan-)[0-9]+\.[0-9]+\.[0-9]+' ./${{ env.BRANCH }}/base/${{ env.DOCKERFILE }})
          echo "CKAN_VERSION=${CKAN_VERSION}" >> $GITHUB_ENV

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Linting Dockerfiles and annotate code inline in the github PR viewer
        id: hadolint
        uses: jbergstroem/hadolint-gh-action@v1.12.2
        with:
          dockerfile: ${{ env.CONTEXT }}/${{ env.BRANCH }}/dev/Dockerfile
          version: ${{ env.HADOLINT_VERSION }}
          annotate: true
          error_level: -1

  build_and_push_dev:
    name: runner/test-docker-pr:${{ github.head_ref }}.*-dev
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check out code
        uses: actions/checkout@v4

      - name: Extract CKAN_VERSION from dev Dockerfile
        id: extract_version
        run: |
          CKAN_VERSION=$(grep -oP '(?<=^ARG CKAN_VERSION=ckan-)[0-9]+\.[0-9]+\.[0-9]+' ./${{ env.BRANCH }}/dev/${{ env.DOCKERFILE }})
          echo "CKAN_VERSION=${CKAN_VERSION}" >> $GITHUB_ENV

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Linting Dockerfiles and annotate code inline in the github PR viewer
        id: hadolint
        uses: jbergstroem/hadolint-gh-action@v1.12.2
        with:
          dockerfile: ${{ env.CONTEXT }}/${{ env.BRANCH }}/dev/Dockerfile
          version: ${{ env.HADOLINT_VERSION }}
          annotate: true
          error_level: -1

  build_and_push_test:
    name: runner/test-docker-pr:${{ github.head_ref }}.*-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check out code
        uses: actions/checkout@v4

      - name: Extract CKAN_VERSION from test Dockerfile
        id: extract_version
        run: |
          CKAN_VERSION=$(grep -oP '(?<=^ARG CKAN_VERSION=ckan-)[0-9]+\.[0-9]+\.[0-9]+' ./${{ env.BRANCH }}/test/${{ env.DOCKERFILE }})
          echo "CKAN_VERSION=${CKAN_VERSION}" >> $GITHUB_ENV

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Linting Dockerfiles and annotate code inline in the github PR viewer
        id: hadolint
        uses: jbergstroem/hadolint-gh-action@v1.12.2
        with:
          dockerfile: ${{ env.CONTEXT }}/${{ env.BRANCH }}/dev/Dockerfile
          version: ${{ env.HADOLINT_VERSION }}
          annotate: true
          error_level: -1