name: Build and release images manually (Alpine and Python)

on: 
  workflow_dispatch:
    inputs:
      dockerfile:
        description: 'Type of image to build'
        required: true
        default: 'Dockerfile'
        type: choice
        options:
        - Dockerfile
        - Dockerfile.py3.*

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mjanez/ckan-spatial
  CONTEXT: .
  BRANCH: ${{ github.ref_name }}
  DOCKERFILE: ${{ github.event.inputs.dockerfile }}

jobs:
  build_and_push_base:
    runs-on: ubuntu-latest
    outputs:
      ckan_version: ${{ steps.extract_version.outputs.ckan_version }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check out code
        uses: actions/checkout@v4

      - name: Determine Dockerfile
        id: determine_dockerfile
        run: |
          if [[ "${{ env.DOCKERFILE }}" == "Dockerfile.py3.*" ]]; then
            REAL_DOCKERFILE=$(find ./${{ env.BRANCH }}/base -name "Dockerfile.py3.*" | head -n 1)
            REAL_DOCKERFILE_NAME=$(basename $REAL_DOCKERFILE)
            echo "DOCKERFILE=${REAL_DOCKERFILE_NAME}" >> $GITHUB_ENV
          else
            echo "DOCKERFILE=${{ env.DOCKERFILE }}" >> $GITHUB_ENV
          fi

      - name: Extract CKAN_VERSION from base Dockerfile
        id: extract_version
        run: |
          CKAN_VERSION=$(grep -oP '(?<=^ARG CKAN_VERSION=ckan-)[0-9]+\.[0-9]+\.[0-9]+' ./${{ env.BRANCH }}/base/${{ env.DOCKERFILE }})
          echo "ckan_version=${CKAN_VERSION}" >> $GITHUB_OUTPUT

      - name: Generate suffix tag
        id: generate_suffix
        run: |
          if [ "${{ env.DOCKERFILE }}" = "Dockerfile" ]; then
            echo "suffix_tag=" >> $GITHUB_OUTPUT
          else
            SUFFIX=$(echo ${{ env.DOCKERFILE }} | sed 's/Dockerfile/-/')
            echo "suffix_tag=${SUFFIX}" >> $GITHUB_OUTPUT
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base
          labels: |
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/${{ env.BRANCH }}/README.md
            org.opencontainers.image.version={{ steps.extract_version.outputs.ckan_version }}

      - name: Build and push base image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:${{ steps.extract_version.outputs.ckan_version }}${{ steps.generate_suffix.outputs.suffix_tag }}
          labels: ${{ steps.meta.outputs.labels }}
          context: ${{ env.CONTEXT }}/${{ env.BRANCH }}/base
          file: ${{ env.CONTEXT }}/${{ env.BRANCH }}/base/${{ env.DOCKERFILE }}
        
      - name: Linting Dockerfile with hadolint in GH Actions
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ env.CONTEXT }}/${{ env.BRANCH }}/base/${{ env.DOCKERFILE }}
          no-fail: true

      - name: Run Trivy container image vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:${{ steps.extract_version.outputs.ckan_version }}${{ steps.generate_suffix.outputs.suffix_tag }}
          format: sarif
          output: trivy-results-base.sarif

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results-base.sarif

  build_and_push_dev:
    runs-on: ubuntu-latest
    needs: build_and_push_base
    env:
      CKAN_VERSION: ${{ needs.build_and_push_base.outputs.ckan_version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Generate suffix tag
        id: generate_suffix
        run: |
          if [ "${{ env.DOCKERFILE }}" = "Dockerfile" ]; then
            echo "suffix_tag=" >> $GITHUB_OUTPUT
          else
            SUFFIX=$(echo ${{ env.DOCKERFILE }} | sed 's/Dockerfile/-/')
            echo "suffix_tag=${SUFFIX}" >> $GITHUB_OUTPUT
          fi

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push dev image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-dev:${{ env.CKAN_VERSION }}${{ steps.generate_suffix.outputs.suffix_tag }}
          labels: ${{ needs.build_and_push_base.outputs.meta.outputs.labels }}
          context: ${{ env.CONTEXT }}/${{ env.BRANCH }}/dev
          file: ${{ env.CONTEXT }}/${{ env.BRANCH }}/dev/${{ env.DOCKERFILE }}

      - name: Linting Dockerfile with hadolint in GH Actions
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ env.CONTEXT }}/${{ env.BRANCH }}/dev/${{ env.DOCKERFILE }}
          no-fail: true

      - name: Run Trivy container image vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-dev:${{ env.CKAN_VERSION }}${{ steps.generate_suffix.outputs.suffix_tag }}
          format: sarif
          output: trivy-results-dev.sarif

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results-dev.sarif

  build_and_push_test:
    runs-on: ubuntu-latest
    needs: build_and_push_base
    env:
      CKAN_VERSION: ${{ needs.build_and_push_base.outputs.ckan_version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push test image
        uses: docker/build-push-action@v6
        with:
          push: true
          # Test only use base Dockerfile
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-test:${{ env.CKAN_VERSION }}
          labels: ${{ needs.build_and_push_base.outputs.meta.outputs.labels }}
          context: ${{ env.CONTEXT }}/${{ env.BRANCH }}/test
          # Test only use base Dockerfile
          file: ${{ env.CONTEXT }}/${{ env.BRANCH }}/test/Dockerfile

      - name: Linting Dockerfile with hadolint in GH Actions
        uses: hadolint/hadolint-action@v3.1.0
        with:
          # Test only use base Dockerfile
          dockerfile: ${{ env.CONTEXT }}/${{ env.BRANCH }}/test/Dockerfile
          no-fail: true

      - name: Run Trivy container image vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          # Test only use base Dockerfile
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-test:${{ env.CKAN_VERSION }}
          format: sarif
          output: trivy-results-test.sarif

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results-test.sarif