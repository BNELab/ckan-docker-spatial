name: Build and release images manually

on: workflow_dispatch

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mjanez/ckan-base-spatial
  CONTEXT: .
  BRANCH: ${{ github.ref_name }}
  DOCKERFILE: Dockerfile

jobs:
  build_and_push_base:
    runs-on: ubuntu-latest
    outputs:
      ckan_version: ${{ steps.extract_version.outputs.ckan_version }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check out code
        uses: actions/checkout@v4

      - name: Extract CKAN_VERSION from base Dockerfile
        id: extract_version
        run: |
          CKAN_VERSION=$(grep -oP '(?<=^ARG CKAN_VERSION=ckan-)[0-9]+\.[0-9]+\.[0-9]+' ./${{ env.BRANCH }}/base/${{ env.DOCKERFILE }})
          echo "::set-output name=ckan_version::${CKAN_VERSION}"

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/${{ env.BRANCH }}/README.md
            org.opencontainers.image.version=${{ env.BRANCH }}

      - name: Build and push base image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract_version.outputs.ckan_version }}
          labels: ${{ steps.meta.outputs.labels }}
          context: ${{ env.CONTEXT }}/${{ env.BRANCH }}/base
          file: ${{ env.CONTEXT }}/${{ env.BRANCH }}/base/${{ env.DOCKERFILE }}

      - name: Linting Dockerfile with hadolint in GH Actions
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ env.CONTEXT }}/${{ env.BRANCH }}/base/${{ env.DOCKERFILE }}
          no-fail: true

      - name: Run Trivy container image vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract_version.outputs.ckan_version }}
          format: sarif
          output: trivy-results-base.sarif

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results-base.sarif

  build_and_push_dev:
    runs-on: ubuntu-latest
    needs: build_and_push_base
    env:
      CKAN_VERSION: ${{ needs.build_and_push_base.outputs.ckan_version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push dev image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.CKAN_VERSION }}-dev
          labels: ${{ needs.build_and_push_base.outputs.meta.outputs.labels }}
          context: ${{ env.CONTEXT }}/${{ env.BRANCH }}/dev
          file: ${{ env.CONTEXT }}/${{ env.BRANCH }}/dev/${{ env.DOCKERFILE }}

      - name: Linting Dockerfile with hadolint in GH Actions
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ env.CONTEXT }}/${{ env.BRANCH }}/dev/${{ env.DOCKERFILE }}
          no-fail: true

      - name: Run Trivy container image vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.CKAN_VERSION }}-dev
          format: sarif
          output: trivy-results-dev.sarif

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results-dev.sarif

  build_and_push_test:
    runs-on: ubuntu-latest
    needs: build_and_push_dev
    env:
      CKAN_VERSION: ${{ needs.build_and_push_base.outputs.ckan_version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push test image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.CKAN_VERSION }}-test
          labels: ${{ needs.build_and_push_base.outputs.meta.outputs.labels }}
          context: ${{ env.CONTEXT }}/${{ env.BRANCH }}/test
          file: ${{ env.CONTEXT }}/${{ env.BRANCH }}/test/${{ env.DOCKERFILE }}

      - name: Linting Dockerfile with hadolint in GH Actions
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ env.CONTEXT }}/${{ env.BRANCH }}/test/${{ env.DOCKERFILE }}
          no-fail: true

      - name: Run Trivy container image vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.CKAN_VERSION }}-test
          format: sarif
          output: trivy-results-test.sarif

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results-test.sarif